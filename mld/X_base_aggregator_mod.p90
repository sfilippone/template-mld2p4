!!$
!!$ 
!!$                           MLD2P4  version 2.1
!!$  MultiLevel Domain Decomposition Parallel Preconditioners Package
!!$             based on PSBLAS (Parallel Sparse BLAS version 3.3)
!!$  
!!$  (C) Copyright 2008, 2010, 2012, 2015, 2017 
!!$
!!$                      Salvatore Filippone  Cranfield University
!!$		      Ambra Abdullahi Hassan University of Rome Tor Vergata
!!$                      Alfredo Buttari      CNRS-IRIT, Toulouse
!!$                      Pasqua D'Ambra       ICAR-CNR, Naples
!!$                      Daniela di Serafino  Second University of Naples
!!$ 
!!$  Redistribution and use in source and binary forms, with or without
!!$  modification, are permitted provided that the following conditions
!!$  are met:
!!$    1. Redistributions of source code must retain the above copyright
!!$       notice, this list of conditions and the following disclaimer.
!!$    2. Redistributions in binary form must reproduce the above copyright
!!$       notice, this list of conditions, and the following disclaimer in the
!!$       documentation and/or other materials provided with the distribution.
!!$    3. The name of the MLD2P4 group or the names of its contributors may
!!$       not be used to endorse or promote products derived from this
!!$       software without specific written permission.
!!$ 
!!$  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
!!$  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
!!$  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
!!$  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE MLD2P4 GROUP OR ITS CONTRIBUTORS
!!$  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
!!$  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
!!$  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
!!$  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
!!$  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
!!$  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
!!$  POSSIBILITY OF SUCH DAMAGE.
!!$ 
!!$
!
!  The aggregator object hosts the aggregation method for building
!  the multilevel hierarchy. The basic version is the 
!  decoupled aggregation algorithm presented in
!
!    M. Brezina and P. Vanek, A black-box iterative solver based on a 
!    two-level Schwarz method, Computing,  63 (1999), 233-263.
!    P. D'Ambra, D. di Serafino and S. Filippone, On the development of
!    PSBLAS-based parallel two-level Schwarz preconditioners, Appl. Num. Math.
!    57 (2007), 1181-1196.
!    
module mld_@X@_base_aggregator_mod

  use mld_base_prec_type, only : mld_@RT@ml_parms
  use psb_base_mod, only : psb_@X@spmat_type, psb_@X@_vect_type, &
       & psb_@X@_base_vect_type, psb_@X@linmap_type, @FKIND@, &
       & psb_ipk_, psb_long_int_k_, psb_desc_type, psb_i_base_vect_type, &
       & psb_erractionsave, psb_error_handler, psb_success_
  !
  !   sm           -  class(mld_T_base_smoother_type), allocatable
  !                   The current level preconditioner (aka smoother).
  !   parms        -  type(mld_RTml_parms)
  !                   The parameters defining the multilevel strategy.
  !   ac           -  The local part of the current-level matrix, built by
  !                   coarsening the previous-level matrix.
  !   desc_ac      -  type(psb_desc_type).
  !                   The communication descriptor associated to the matrix
  !                   stored in ac.
  !   base_a       -  type(psb_Tspmat_type), pointer.
  !                   Pointer (really a pointer!) to the local part of the current 
  !                   matrix (so we have a unified treatment of residuals).
  !                   We need this to avoid passing explicitly the current matrix
  !                   to the routine which applies the preconditioner.
  !   base_desc    -  type(psb_desc_type), pointer.
  !                   Pointer to the communication descriptor associated to the
  !                   matrix pointed by base_a.
  !   map          -  Stores the maps (restriction and prolongation) between the
  !                   vector spaces associated to the index spaces of the previous
  !                   and current levels.
  !
  !   Methods:  
  !     Most methods follow the encapsulation hierarchy: they take whatever action
  !     is appropriate for the current object, then call the corresponding method for
  !     the contained object.
  !     As an example: the descr() method prints out a description of the
  !     level. It starts by invoking the descr() method of the parms object,
  !     then calls the descr() method of the smoother object. 
  !
  !    descr      -   Prints a description of the object.
  !    default    -   Set default values
  !    dump       -   Dump to file object contents
  !    set        -   Sets various parameters; when a request is unknown
  !                   it is passed to the smoother object for further processing.
  !    check      -   Sanity checks.
  !    sizeof     -   Total memory occupation in bytes
  !    get_nzeros -   Number of nonzeros 
  !
  !
  type mld_@X@_base_aggregator_type
    
  contains
    procedure, pass(ag) :: bld_tprol    => mld_@X@_base_aggregator_build_tprol
    procedure, pass(ag) :: mat_asb      => mld_@X@_base_aggregator_mat_asb
    procedure, pass(ag) :: update_level => mld_@X@_base_aggregator_update_level
    procedure, pass(ag) :: clone        => mld_@X@_base_aggregator_clone
    procedure, pass(ag) :: free         => mld_@X@_base_aggregator_free
    procedure, pass(ag) :: default      => mld_@X@_base_aggregator_default
    procedure, pass(ag) :: descr        => mld_@X@_base_aggregator_descr
    procedure, nopass   :: fmt          => mld_@X@_base_aggregator_fmt
  end type mld_@X@_base_aggregator_type


  interface
    subroutine  mld_@X@_base_aggregator_build_tprol(ag,parms,a,desc_a,ilaggr,nlaggr,op_prol,info)
      import :: mld_@X@_base_aggregator_type, psb_desc_type, psb_@X@spmat_type, @FKIND@,  &
           & psb_ipk_, psb_long_int_k_, mld_@RT@ml_parms
      implicit none
      class(mld_@X@_base_aggregator_type), target, intent(inout) :: ag
      type(mld_@RT@ml_parms), intent(inout)  :: parms 
      type(psb_@X@spmat_type), intent(in)   :: a
      type(psb_desc_type), intent(in)     :: desc_a
      integer(psb_ipk_), allocatable, intent(out) :: ilaggr(:),nlaggr(:)
      type(psb_@X@spmat_type), intent(out)  :: op_prol
      integer(psb_ipk_), intent(out)      :: info
    end subroutine mld_@X@_base_aggregator_build_tprol
  end interface

  interface
    subroutine  mld_@X@_base_aggregator_mat_asb(ag,parms,a,desc_a,ilaggr,nlaggr,ac,&
         & op_prol,op_restr,info)
      import :: mld_@X@_base_aggregator_type, psb_desc_type, psb_@X@spmat_type, @FKIND@,  &
           & psb_ipk_, psb_long_int_k_, mld_@RT@ml_parms
      implicit none
      class(mld_@X@_base_aggregator_type), target, intent(inout) :: ag
      type(mld_@RT@ml_parms), intent(inout)   :: parms 
      type(psb_@X@spmat_type), intent(in)    :: a
      type(psb_desc_type), intent(in)      :: desc_a
      integer(psb_ipk_), intent(inout)     :: ilaggr(:), nlaggr(:)
      type(psb_@X@spmat_type), intent(inout)   :: op_prol
      type(psb_@X@spmat_type), intent(out)   :: ac,op_restr
      integer(psb_ipk_), intent(out)       :: info
    end subroutine mld_@X@_base_aggregator_mat_asb
  end interface  

contains

  subroutine  mld_@X@_base_aggregator_update_level(ag,agnext,info)
    implicit none 
    class(mld_@X@_base_aggregator_type), target, intent(inout) :: ag, agnext
    integer(psb_ipk_), intent(out)       :: info

    !
    ! Base version does nothing. 
    !
    info = 0 
  end subroutine mld_@X@_base_aggregator_update_level
  
  subroutine  mld_@X@_base_aggregator_clone(ag,agnext,info)
    implicit none 
    class(mld_@X@_base_aggregator_type), intent(inout) :: ag
    class(mld_@X@_base_aggregator_type), allocatable, intent(inout) :: agnext
    integer(psb_ipk_), intent(out)       :: info

    info = 0 
    if (allocated(agnext)) then
      call agnext%free(info)
      if (info == 0) deallocate(agnext,stat=info)
    end if
    if (info /= 0) return
    allocate(agnext,source=ag,stat=info)
    
  end subroutine mld_@X@_base_aggregator_clone

  subroutine  mld_@X@_base_aggregator_free(ag,info)
    implicit none 
    class(mld_@X@_base_aggregator_type), intent(inout) :: ag
    integer(psb_ipk_), intent(out)       :: info
    
    info = psb_success_
    return
  end subroutine mld_@X@_base_aggregator_free
  
  subroutine  mld_@X@_base_aggregator_default(ag)
    implicit none 
    class(mld_@X@_base_aggregator_type), intent(inout) :: ag

    ! Here we need do nothing
    
    return
  end subroutine mld_@X@_base_aggregator_default

  function mld_@X@_base_aggregator_fmt() result(val)
    implicit none 
    character(len=32)  :: val

    val = "Decoupled aggregation"
  end function mld_@X@_base_aggregator_fmt

  subroutine  mld_@X@_base_aggregator_descr(ag,parms,iout,info)
    implicit none 
    class(mld_@X@_base_aggregator_type), intent(in) :: ag
    type(mld_@RT@ml_parms), intent(in)   :: parms
    integer(psb_ipk_), intent(in)  :: iout
    integer(psb_ipk_), intent(out) :: info

    call parms%mldescr(iout,info,aggr_name=ag%fmt())
    
    return
  end subroutine mld_@X@_base_aggregator_descr
  
end module mld_@X@_base_aggregator_mod

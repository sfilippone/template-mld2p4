!!$ 
!!$ 
!!$                           MLD2P4  version 2.0
!!$  MultiLevel Domain Decomposition Parallel Preconditioners Package
!!$             based on PSBLAS (Parallel Sparse BLAS version 3.3)
!!$  
!!$  (C) Copyright 2008, 2010, 2012, 2015
!!$
!!$                      Salvatore Filippone  University of Rome Tor Vergata
!!$                      Alfredo Buttari      CNRS-IRIT, Toulouse
!!$                      Pasqua D'Ambra       ICAR-CNR, Naples
!!$                      Daniela di Serafino  Second University of Naples
!!$ 
!!$  Redistribution and use in source and binary forms, with or without
!!$  modification, are permitted provided that the following conditions
!!$  are met:
!!$    1. Redistributions of source code must retain the above copyright
!!$       notice, this list of conditions and the following disclaimer.
!!$    2. Redistributions in binary form must reproduce the above copyright
!!$       notice, this list of conditions, and the following disclaimer in the
!!$       documentation and/or other materials provided with the distribution.
!!$    3. The name of the MLD2P4 group or the names of its contributors may
!!$       not be used to endorse or promote products derived from this
!!$       software without specific written permission.
!!$ 
!!$  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
!!$  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
!!$  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
!!$  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE MLD2P4 GROUP OR ITS CONTRIBUTORS
!!$  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
!!$  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
!!$  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
!!$  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
!!$  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
!!$  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
!!$  POSSIBILITY OF SUCH DAMAGE.
!!$ 
!!$
! File: mld_@X@precset.f90
!
! Subroutine: mld_@X@precseti
! Version: @TYPE@
!
!  This routine sets the integer parameters defining the preconditioner. More
!  precisely, the integer parameter identified by 'what' is assigned the value
!  contained in 'val'.
!  For the multilevel preconditioners, the levels are numbered in increasing
!  order starting from the finest one, i.e. level 1 is the finest level. 
!
!  To set character and @TYPE@ parameters, see mld_@X@precsetc and mld_@X@precsetr,
!  respectively.
!
!
! Arguments:
!    p       -  type(mld_@X@prec_type), input/output.
!               The preconditioner data structure.
!    what    -  integer, input.
!               The number identifying the parameter to be set.
!               A mnemonic constant has been associated to each of these
!               numbers, as reported in the MLD2P4 User's and Reference Guide.
!    val     -  integer, input.
!               The value of the parameter to be set. The list of allowed
!               values is reported in the MLD2P4 User's and Reference Guide.
!    info    -  integer, output.
!               Error code.
!    ilev    -  integer, optional, input.
!               For the multilevel preconditioner, the level at which the
!               preconditioner parameter has to be set. 
!               If nlev is not present, the parameter identified by 'what'
!               is set at all the appropriate levels.
!
!  NOTE: currently, the use of the argument ilev is not "safe" and is reserved to
!  MLD2P4 developers. Indeed, by using ilev it is possible to set different values
!  of the same parameter at different levels 1,...,nlev-1, even in cases where
!  the parameter must have the same value at all the levels but the coarsest one.
!  For this reason, the interface mld_precset to this routine has been built in
!  such a way that ilev is not visible to the user (see mld_prec_mod.f90).
!   
subroutine mld_@X@precseti(p,what,val,info,ilev,pos)

  use psb_base_mod
  use mld_@X@_prec_mod, mld_protect_name => mld_@X@precseti
  use mld_@X@_jac_smoother
  use mld_@X@_as_smoother
  use mld_@X@_diag_solver
  use mld_@X@_ilu_solver
  use mld_@X@_id_solver
  use mld_@X@_gs_solver
@DPKS@
#if defined(HAVE_UMF_)
  use mld_@X@_umf_solver
#endif
#if defined(HAVE_SLUDIST_)
  use mld_@X@_sludist_solver
#endif
@DPKE@
#if defined(HAVE_SLU_)
  use mld_@X@_slu_solver
#endif
#if defined(HAVE_MUMPS_)
  use mld_@X@_mumps_solver
#endif

  implicit none

  ! Arguments
  class(mld_@X@prec_type), intent(inout)     :: p
  integer(psb_ipk_), intent(in)           :: what 
  integer(psb_ipk_), intent(in)           :: val
  integer(psb_ipk_), intent(out)          :: info
  integer(psb_ipk_), optional, intent(in) :: ilev
  character(len=*), optional, intent(in)      :: pos

  ! Local variables
  integer(psb_ipk_)                      :: ilev_, nlev_
  character(len=*), parameter            :: name='mld_precseti'

  info = psb_success_

  if (.not.allocated(p%precv)) then 
    info = 3111
    write(psb_err_unit,*) name,&
         & ': Error: uninitialized preconditioner,',&
         &' should call MLD_PRECINIT'
    return 
  endif
  nlev_ = size(p%precv)

  if (present(ilev)) then 
    ilev_ = ilev
  else
    ilev_ = 1 
  end if

  if ((ilev_<1).or.(ilev_ > nlev_)) then 
    info = -1
    write(psb_err_unit,*) name,&
         &': Error: invalid ILEV/NLEV combination',ilev_, nlev_
    return
  endif


  select case(what)
  case (mld_coarse_aggr_size_)
    p%coarse_aggr_size = max(val,-1)
    return
  case (mld_n_prec_levs_)
    p%n_prec_levs = max(val,1)
    return
  case(mld_max_prec_levs_)
    p%max_prec_levs = max(val,1)
    return
  end select

  !
  ! Set preconditioner parameters at level ilev.
  !
  if (present(ilev)) then 

    if (ilev_ == 1) then

      call p%precv(ilev_)%set(what,val,info,pos=pos)

    else if (ilev_ > 1) then 

      select case(what) 
      case(mld_smoother_type_,mld_sub_solve_,mld_smoother_sweeps_,&
           & mld_ml_type_,mld_aggr_alg_,mld_aggr_ord_,&
           & mld_aggr_kind_,mld_smoother_pos_,&
           & mld_aggr_omega_alg_,mld_aggr_eig_,&
           & mld_smoother_sweeps_pre_,mld_smoother_sweeps_post_,&
           & mld_sub_restr_,mld_sub_prol_, &
           & mld_sub_ren_,mld_sub_ovr_,mld_sub_fillin_,&
           & mld_coarse_mat_)
        call p%precv(ilev_)%set(what,val,info,pos=pos)

      case(mld_coarse_subsolve_)
        if (ilev_ /= nlev_) then 
          write(psb_err_unit,*) name,&
               & ': Error: Inconsistent specification of WHAT vs. ILEV'
          info = -2
          return
        end if
        call p%precv(ilev_)%set(mld_sub_solve_,val,info,pos=pos)
      case(mld_coarse_solve_)
        if (ilev_ /= nlev_) then 
          write(psb_err_unit,*) name,&
               & ': Error: Inconsistent specification of WHAT vs. ILEV'
          info = -2
          return
        end if

        if (nlev_ > 1) then 
          call p%precv(nlev_)%set(mld_coarse_solve_,val,info,pos=pos)
          select case (val) 
          case(mld_bjac_)
            call p%precv(nlev_)%set(mld_smoother_type_,val,info,pos=pos)
@DPKS@
#if defined(HAVE_UMF_)
            call p%precv(nlev_)%set(mld_sub_solve_,mld_umf_,info,pos=pos)
#elif defined(HAVE_SLU_) 
            call p%precv(nlev_)%set(mld_sub_solve_,mld_slu_,info,pos=pos)
#elif defined(HAVE_MUMPS_) 
            call p%precv(nlev_)%set(mld_sub_solve_,mld_mumps_,info,pos=pos)
#else 
            call p%precv(nlev_)%set(mld_sub_solve_,mld_ilu_n_,info,pos=pos)
#endif
@DPKE@
@SPKS@            
#if defined(HAVE_SLU_) 
            call p%precv(nlev_)%set(mld_sub_solve_,mld_slu_,info,pos=pos)
#elif defined(HAVE_MUMPS_) 
            call p%precv(nlev_)%set(mld_sub_solve_,mld_mumps_,info,pos=pos)
#else 
            call p%precv(nlev_)%set(mld_sub_solve_,mld_ilu_n_,info,pos=pos)
#endif
@SPKE@
            call p%precv(nlev_)%set(mld_coarse_mat_,mld_distr_mat_,info,pos=pos)
          case(mld_umf_, mld_slu_,mld_ilu_n_, mld_ilu_t_,mld_milu_n_)
            call p%precv(nlev_)%set(mld_smoother_type_,mld_bjac_,info,pos=pos)
            call p%precv(nlev_)%set(mld_sub_solve_,val,info,pos=pos)
            call p%precv(nlev_)%set(mld_coarse_mat_,mld_repl_mat_,info,pos=pos)
          case(mld_sludist_,mld_mumps_)
            call p%precv(nlev_)%set(mld_smoother_type_,mld_bjac_,info,pos=pos)
            call p%precv(nlev_)%set(mld_sub_solve_,val,info,pos=pos)
            call p%precv(nlev_)%set(mld_coarse_mat_,mld_distr_mat_,info,pos=pos)
          case(mld_jac_)
            call p%precv(nlev_)%set(mld_smoother_type_,mld_bjac_,info,pos=pos)
            call p%precv(nlev_)%set(mld_sub_solve_,mld_diag_scale_,info,pos=pos)
            call p%precv(nlev_)%set(mld_coarse_mat_,mld_distr_mat_,info,pos=pos)
          end select

        endif
      case(mld_coarse_sweeps_)
        if (ilev_ /= nlev_) then 
          write(psb_err_unit,*) name,&
               & ': Error: Inconsistent specification of WHAT vs. ILEV'
          info = -2
          return
        end if
        call p%precv(nlev_)%set(mld_smoother_sweeps_,val,info,pos=pos)

      case(mld_coarse_fillin_)
        if (ilev_ /= nlev_) then 
          write(psb_err_unit,*) name,&
               & ': Error: Inconsistent specification of WHAT vs. ILEV'
          info = -2
          return
        end if
        call p%precv(nlev_)%set(mld_sub_fillin_,val,info,pos=pos)
      case default
        call p%precv(ilev_)%set(what,val,info,pos=pos)
      end select

    endif

  else if (.not.present(ilev)) then 
    !
    ! ilev not specified: set preconditioner parameters at all the appropriate
    ! levels
    !
    select case(what) 
    case(mld_sub_solve_,mld_sub_restr_,mld_sub_prol_,&
         & mld_sub_ren_,mld_sub_ovr_,mld_sub_fillin_,&
         & mld_smoother_sweeps_,mld_smoother_type_)
      do ilev_=1,max(1,nlev_-1)
        call p%precv(ilev_)%set(what,val,info,pos=pos)
        if (info /= 0) return 
      end do

    case(mld_ml_type_,mld_aggr_alg_,mld_aggr_ord_,mld_aggr_kind_,&
         & mld_smoother_sweeps_pre_,mld_smoother_sweeps_post_,&
         & mld_smoother_pos_,mld_aggr_omega_alg_,&
         & mld_aggr_eig_,mld_aggr_filter_)
      do ilev_=1,nlev_
        call p%precv(ilev_)%set(what,val,info,pos=pos)
      end do

    case(mld_coarse_mat_)
      if (nlev_ > 1) then 
        call p%precv(nlev_)%set(mld_coarse_mat_,val,info,pos=pos)
      end if

    case(mld_coarse_solve_)
      if (nlev_ > 1) then 

        call p%precv(nlev_)%set(mld_coarse_solve_,val,info,pos=pos)
        select case (val) 
        case(mld_bjac_)
          call p%precv(nlev_)%set(mld_smoother_type_,mld_bjac_,info,pos=pos)
@DPKS@
#if defined(HAVE_UMF_)
          call p%precv(nlev_)%set(mld_sub_solve_,mld_umf_,info,pos=pos)
#elif defined(HAVE_SLU_) 
          call p%precv(nlev_)%set(mld_sub_solve_,mld_slu_,info,pos=pos)
#else 
          call p%precv(nlev_)%set(mld_sub_solve_,mld_ilu_n_,info,pos=pos)
#endif
@DPKE@          
@SPKS@
#if defined(HAVE_SLU_) 
          call p%precv(nlev_)%set(mld_sub_solve_,mld_slu_,info,pos=pos)
#else 
          call p%precv(nlev_)%set(mld_sub_solve_,mld_ilu_n_,info,pos=pos)
#endif
@SPKE@
          call p%precv(nlev_)%set(mld_coarse_mat_,mld_distr_mat_,info,pos=pos)
        case(mld_umf_, mld_slu_,mld_ilu_n_, mld_ilu_t_,mld_milu_n_)
          call p%precv(nlev_)%set(mld_smoother_type_,mld_bjac_,info,pos=pos)
          call p%precv(nlev_)%set(mld_sub_solve_,val,info,pos=pos)
          call p%precv(nlev_)%set(mld_coarse_mat_,mld_repl_mat_,info,pos=pos)
        case(mld_sludist_)
          call p%precv(nlev_)%set(mld_smoother_type_,mld_bjac_,info,pos=pos)
          call p%precv(nlev_)%set(mld_sub_solve_,val,info,pos=pos)
          call p%precv(nlev_)%set(mld_coarse_mat_,mld_distr_mat_,info,pos=pos)
        case(mld_mumps_)
          call p%precv(nlev_)%set(mld_smoother_type_,mld_bjac_,info,pos=pos)
          call p%precv(nlev_)%set(mld_sub_solve_,val,info,pos=pos)
          call p%precv(nlev_)%set(mld_coarse_mat_,mld_distr_mat_,info,pos=pos)
        case(mld_jac_)
          call p%precv(nlev_)%set(mld_smoother_type_,mld_bjac_,info,pos=pos)
          call p%precv(nlev_)%set(mld_sub_solve_,mld_diag_scale_,info,pos=pos)
          call p%precv(nlev_)%set(mld_coarse_mat_,mld_distr_mat_,info,pos=pos)
        end select

      endif

    case(mld_coarse_subsolve_)
      if (nlev_ > 1) then 
        call p%precv(nlev_)%set(mld_sub_solve_,val,info,pos=pos)
      endif

    case(mld_coarse_sweeps_)

      if (nlev_ > 1) then
        call p%precv(nlev_)%set(mld_smoother_sweeps_,val,info,pos=pos)
      end if

    case(mld_coarse_fillin_)
      if (nlev_ > 1) then 
        call p%precv(nlev_)%set(mld_sub_fillin_,val,info,pos=pos)
      end if
    case default
      do ilev_=1,nlev_
        call p%precv(ilev_)%set(what,val,info,pos=pos)
      end do
    end select

  endif

end subroutine mld_@X@precseti

subroutine mld_@X@precsetsm(p,val,info,ilev,pos)

  use psb_base_mod
  use mld_@X@_prec_mod, mld_protect_name => mld_@X@precsetsm

  implicit none

  ! Arguments
  class(mld_@X@prec_type), intent(inout)         :: p
  class(mld_@X@_base_smoother_type), intent(in) :: val
  integer(psb_ipk_), intent(out)              :: info
  integer(psb_ipk_), optional, intent(in)     :: ilev
  character(len=*), optional, intent(in)      :: pos

  ! Local variables
  integer(psb_ipk_)                      :: ilev_, nlev_, ilmin, ilmax
  character(len=*), parameter            :: name='mld_precseti'

  info = psb_success_

  if (.not.allocated(p%precv)) then 
    info = 3111
    write(psb_err_unit,*) name,&
         & ': Error: uninitialized preconditioner,',&
         &' should call MLD_PRECINIT'
    return 
  endif
  nlev_ = size(p%precv)

  if (present(ilev)) then 
    ilev_ = ilev
    ilmin = ilev
    ilmax = ilev
  else
    ilev_ = 1 
    ilmin = 1
    ilmax = nlev_
  end if

  if ((ilev_<1).or.(ilev_ > nlev_)) then 
    info = -1
    write(psb_err_unit,*) name,&
         & ': Error: invalid ILEV/NLEV combination',ilev_, nlev_
    return
  endif
  

  do ilev_ = ilmin, ilmax 
    call p%precv(ilev_)%set(val,info,pos=pos)
    if (info /= 0) return 
  end do

end subroutine mld_@X@precsetsm

subroutine mld_@X@precsetsv(p,val,info,ilev,pos)

  use psb_base_mod
  use mld_@X@_prec_mod, mld_protect_name => mld_@X@precsetsv

  implicit none

  ! Arguments
  class(mld_@X@prec_type), intent(inout)       :: p
  class(mld_@X@_base_solver_type), intent(in) :: val
  integer(psb_ipk_), intent(out)            :: info
  integer(psb_ipk_), optional, intent(in)   :: ilev
  character(len=*), optional, intent(in)      :: pos

  ! Local variables
  integer(psb_ipk_)                       :: ilev_, nlev_, ilmin, ilmax
  character(len=*), parameter            :: name='mld_precseti'

  info = psb_success_

  if (.not.allocated(p%precv)) then 
    info = 3111
    write(psb_err_unit,*) name,&
         & ': Error: uninitialized preconditioner,',&
         &' should call MLD_PRECINIT'
    return 
  endif
  nlev_ = size(p%precv)

  if (present(ilev)) then 
    ilev_ = ilev
    ilmin = ilev
    ilmax = ilev
  else
    ilev_ = 1 
    ilmin = 1
    ilmax = nlev_
  end if


  if ((ilev_<1).or.(ilev_ > nlev_)) then 
    info = -1
    write(psb_err_unit,*) name,&
         & ': Error: invalid ILEV/NLEV combination',ilev_, nlev_
    return
  endif

  do ilev_ = ilmin, ilmax 
    call p%precv(ilev_)%set(val,info,pos=pos)
    if (info /= 0) return 
  end do

end subroutine mld_@X@precsetsv

!
! Subroutine: mld_@X@precsetc
! Version: @TYPE@
!
!  This routine sets the character parameters defining the preconditioner. More
!  precisely, the character parameter identified by 'what' is assigned the value
!  contained in 'val'.
!  For the multilevel preconditioners, the levels are numbered in increasing
!  order starting from the finest one, i.e. level 1 is the finest level. 
!
!  To set integer and @TYPE@ parameters, see mld_@X@precseti and mld_@X@precsetr,
!  respectively.
!
!
! Arguments:
!    p       -  type(mld_@X@prec_type), input/output.
!               The preconditioner data structure.
!    what    -  integer, input.
!               The number identifying the parameter to be set.
!               A mnemonic constant has been associated to each of these
!               numbers, as reported in the MLD2P4 User's and Reference Guide.
!    string  -  character(len=*), input.
!               The value of the parameter to be set. The list of allowed
!               values is reported in the MLD2P4 User's and Reference Guide.
!    info    -  integer, output.
!               Error code.
!    ilev    -  integer, optional, input.
!               For the multilevel preconditioner, the level at which the
!               preconditioner parameter has to be set. 
!               If nlev is not present, the parameter identified by 'what'
!               is set at all the appropriate levels.
!
!  NOTE: currently, the use of the argument ilev is not "safe" and is reserved to
!  MLD2P4 developers. Indeed, by using ilev it is possible to set different values
!  of the same parameter at different levels 1,...,nlev-1, even in cases where
!  the parameter must have the same value at all the levels but the coarsest one.
!  For this reason, the interface mld_precset to this routine has been built in
!  such a way that ilev is not visible to the user (see mld_prec_mod.f90).
!   
subroutine mld_@X@precsetc(p,what,string,info,ilev,pos)

  use psb_base_mod
  use mld_@X@_prec_mod, mld_protect_name => mld_@X@precsetc

  implicit none

  ! Arguments
  class(mld_@X@prec_type), intent(inout)     :: p
  integer(psb_ipk_), intent(in)           :: what 
  character(len=*), intent(in)            :: string
  integer(psb_ipk_), intent(out)          :: info
  integer(psb_ipk_), optional, intent(in) :: ilev
  character(len=*), optional, intent(in)      :: pos

  ! Local variables
  integer(psb_ipk_)                      :: ilev_, nlev_,val
  character(len=*), parameter            :: name='mld_precsetc'

  info = psb_success_

  if (.not.allocated(p%precv)) then 
    info = 3111
    return 
  endif
  nlev_ = size(p%precv)

  if (present(ilev)) then 
    ilev_ = ilev
  else
    ilev_ = 1 
  end if

  if ((ilev_<1).or.(ilev_ > nlev_)) then 
    write(psb_err_unit,*) name,&
         & ': Error: invalid ILEV/NLEV combination',ilev_, nlev_
    info = -1
    return
  endif

  val =  mld_stringval(string)
  if (val >=0)  call p%set(what,val,info,ilev=ilev,pos=pos)


end subroutine mld_@X@precsetc


!
! Subroutine: mld_@X@precsetr
! Version: @TYPE@
!
!  This routine sets the @TYPE@ parameters defining the preconditioner. More
!  precisely, the @TYPE@ parameter identified by 'what' is assigned the value
!  contained in 'val'.
!  For the multilevel preconditioners, the levels are numbered in increasing
!  order starting from the finest one, i.e. level 1 is the finest level. 
!
!  To set integer and character parameters, see mld_@X@precseti and mld_@X@precsetc,
!  respectively.
!
! Arguments:
!    p       -  type(mld_@X@prec_type), input/output.
!               The preconditioner data structure.
!    what    -  integer, input.
!               The number identifying the parameter to be set.
!               A mnemonic constant has been associated to each of these
!               numbers, as reported in the MLD2P4 User's and Reference Guide.
!    val     -  @RTYPE@(@FKIND@), input.
!               The value of the parameter to be set. The list of allowed
!               values is reported in the MLD2P4 User's and Reference Guide.
!    info    -  integer, output.
!               Error code.
!    ilev    -  integer, optional, input.
!               For the multilevel preconditioner, the level at which the
!               preconditioner parameter has to be set. 
!               If nlev is not present, the parameter identified by 'what'
!               is set at all the appropriate levels.
!
!  NOTE: currently, the use of the argument ilev is not "safe" and is reserved to
!  MLD2P4 developers. Indeed, by using ilev it is possible to set different values
!  of the same parameter at different levels 1,...,nlev-1, even in cases where
!  the parameter must have the same value at all the levels but the coarsest one.
!  For this reason, the interface mld_precset to this routine has been built in
!  such a way that ilev is not visible to the user (see mld_prec_mod.f90).
!   
subroutine mld_@X@precsetr(p,what,val,info,ilev,pos)

  use psb_base_mod
  use mld_@X@_prec_mod, mld_protect_name => mld_@X@precsetr

  implicit none

  ! Arguments
  class(mld_@X@prec_type), intent(inout)     :: p
  integer(psb_ipk_), intent(in)           :: what 
  @RTYPE@(@FKIND@), intent(in)              :: val
  integer(psb_ipk_), intent(out)          :: info
  integer(psb_ipk_), optional, intent(in) :: ilev
  character(len=*), optional, intent(in)  :: pos

! Local variables
  integer(psb_ipk_)                      :: ilev_,nlev_
  @RTYPE@(@FKIND@)                         :: thr 
  character(len=*), parameter            :: name='mld_precsetr'

  info = psb_success_

  select case(what)
  case (mld_min_aggr_ratio_)
    p%min_aggr_ratio = max(@RONE@,val)
    return
  end select
  
  if (present(ilev)) then 
    ilev_ = ilev
  else
    ilev_ = 1 
  end if

  if (.not.allocated(p%precv)) then 
    write(psb_err_unit,*) name,&
         &': Error: uninitialized preconditioner,',&
         &' should call MLD_PRECINIT' 
    info = 3111
    return 
  endif
  nlev_ = size(p%precv)

  if ((ilev_<1).or.(ilev_ > nlev_)) then 
    write(psb_err_unit,*) name,&
         & ': Error: invalid ILEV/NLEV combination',&
         & ilev_, nlev_
    info = -1
    return
  endif

  !
  ! Set preconditioner parameters at level ilev.
  !
  if (present(ilev)) then 
    
    call p%precv(ilev_)%set(what,val,info,pos=pos)

  else if (.not.present(ilev)) then 
      !
      ! ilev not specified: set preconditioner parameters at all the appropriate levels
      !

      select case(what) 
      case(mld_coarse_iluthrs_)
        ilev_=nlev_
        call p%precv(ilev_)%set(mld_sub_iluthrs_,val,info,pos=pos)

      case(mld_aggr_thresh_)
        thr = val
        do ilev_ = 2, nlev_
          call p%precv(ilev_)%set(mld_aggr_thresh_,thr,info,pos=pos)
          thr = thr * p%precv(ilev_)%parms%aggr_scale
        end do

      case default

        do ilev_=1,nlev_
          call p%precv(ilev_)%set(what,val,info,pos=pos)
        end do
      end select

  endif

end subroutine mld_@X@precsetr




